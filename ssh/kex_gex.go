package ssh

import (
	"crypto"
	"crypto/rand"
	"encoding/binary"
	"fmt"
	"io"
	"io/ioutil"
	"math/big"
	"sort"
	"strconv"
	"strings"
)

const (
	kexAlgoDHGEXSHA1   = "diffie-hellman-group-exchange-sha1"
	kexAlgoDHGEXSHA256 = "diffie-hellman-group-exchange-sha256"
)

func init() {
	supportedKexAlgos = append(supportedKexAlgos[:4], append([]string{kexAlgoDHGEXSHA1}, supportedKexAlgos[3:]...)...)

	kexAlgoMap[kexAlgoDHGEXSHA1] = &dhGEXSHA{hashFunc: crypto.SHA1}
	kexAlgoMap[kexAlgoDHGEXSHA256] = &dhGEXSHA{hashFunc: crypto.SHA256}
}

// Messages
type kexDHGexGroupMsg struct {
	P *big.Int `sshtype:"31"`
	G *big.Int
}

type kexDHGexInitMsg struct {
	X *big.Int `sshtype:"32"`
}

type kexDHGexReplyMsg struct {
	HostKey   []byte `sshtype:"33"`
	Y         *big.Int
	Signature []byte
}

type kexDHGexRequestMsg struct {
	MinBits      uint32 `sshtype:"34"`
	PreferedBits uint32
	MaxBits      uint32
}

const (
	MinBits       = 1024
	MaxBits       = 8192
	PreferredBits = 2048
)

type dhGEXSHA struct {
	hashFunc crypto.Hash
}

func diffieHellman(theirPublic, myPrivate *big.Int, p *big.Int) (*big.Int, error) {
	if theirPublic.Sign() <= 0 || theirPublic.Cmp(p) >= 0 {
		return nil, fmt.Errorf("ssh: DH parameter out of bounds")
	}
	return new(big.Int).Exp(theirPublic, myPrivate, p), nil
}

func (gex *dhGEXSHA) Client(c packetConn, randSource io.Reader, magics *handshakeMagics) (*kexResult, error) {
	// Send GexRequest
	kexDHGexRequest := kexDHGexRequestMsg{
		MinBits:      MinBits,
		PreferedBits: PreferredBits,
		MaxBits:      MaxBits,
	}
	if err := c.writePacket(Marshal(&kexDHGexRequest)); err != nil {
		return nil, err
	}

	// *Receive GexGroup*
	packet, err := c.readPacket()
	if err != nil {
		return nil, err
	}

	var kexDHGexGroup kexDHGexGroupMsg
	if err = Unmarshal(packet, &kexDHGexGroup); err != nil {
		return nil, err
	}

	// reject if p's bit length < MinBits or > MaxBits
	if kexDHGexGroup.P.BitLen() < MinBits || kexDHGexGroup.P.BitLen() > MaxBits {
		return nil, fmt.Errorf("Server-generated gex p (dont't ask) is out of range (%d bits)", kexDHGexGroup.P.BitLen())
	}

	p := kexDHGexGroup.P
	g := kexDHGexGroup.G

	// *Send GexInit
	x, err := rand.Int(randSource, p)
	if err != nil {
		return nil, err
	}
	X := new(big.Int).Exp(g, x, p)
	kexDHGexInit := kexDHGexInitMsg{
		X: X,
	}
	if err := c.writePacket(Marshal(&kexDHGexInit)); err != nil {
		return nil, err
	}

	// Receive GexReply
	packet, err = c.readPacket()
	if err != nil {
		return nil, err
	}

	var kexDHGexReply kexDHGexReplyMsg
	if err = Unmarshal(packet, &kexDHGexReply); err != nil {
		return nil, err
	}

	kInt, err := diffieHellman(kexDHGexReply.Y, x, p)
	if err != nil {
		return nil, err
	}

	h := gex.hashFunc.New()
	magics.write(h)
	writeString(h, kexDHGexReply.HostKey)
	binary.Write(h, binary.BigEndian, uint32(MinBits))
	binary.Write(h, binary.BigEndian, uint32(PreferredBits))
	binary.Write(h, binary.BigEndian, uint32(MaxBits))
	writeInt(h, p)
	writeInt(h, g)
	writeInt(h, X)
	writeInt(h, kexDHGexReply.Y)
	K := make([]byte, intLength(kInt))
	marshalInt(K, kInt)
	h.Write(K)

	return &kexResult{
		H:         h.Sum(nil),
		K:         K,
		HostKey:   kexDHGexReply.HostKey,
		Signature: kexDHGexReply.Signature,
		Hash:      gex.hashFunc,
	}, nil
}

func (gex *dhGEXSHA) Server(c packetConn, randSource io.Reader, magics *handshakeMagics, priv Signer) (result *kexResult, err error) {
	// *Receive GexRequest*
	packet, err := c.readPacket()
	if err != nil {
		return
	}
	var kexDHGexRequest kexDHGexRequestMsg
	if err = Unmarshal(packet, &kexDHGexRequest); err != nil {
		return
	}

	// smoosh the user's preferred size into our own limits
	if kexDHGexRequest.PreferedBits > MaxBits {
		kexDHGexRequest.PreferedBits = MaxBits
	}
	if kexDHGexRequest.PreferedBits < MinBits {
		kexDHGexRequest.PreferedBits = MinBits
	}
	// fix min/max if they're inconsistent.  technically, we could just pout
	// and hang up, but there's no harm in giving them the benefit of the
	// doubt and just picking a bitsize for them.
	if kexDHGexRequest.MinBits > kexDHGexRequest.PreferedBits {
		kexDHGexRequest.MinBits = kexDHGexRequest.PreferedBits
	}
	if kexDHGexRequest.MaxBits < kexDHGexRequest.PreferedBits {
		kexDHGexRequest.MaxBits = kexDHGexRequest.PreferedBits
	}

	// *Send GexGroup*
	// generate prime
	// TODO: Not implemented yet, should load primes from /etc/ssh/moduli
	m := selectModuli(kexDHGexRequest.MinBits, kexDHGexRequest.MaxBits, kexDHGexRequest.PreferedBits, randSource)
	p := m.modulus
	g := big.NewInt(m.generator)
	kexDHGexGroup := kexDHGexGroupMsg{
		P: p,
		G: g,
	}
	if err := c.writePacket(Marshal(&kexDHGexGroup)); err != nil {
		return nil, err
	}

	// *Receive GexInit
	packet, err = c.readPacket()
	if err != nil {
		return
	}
	var kexDHGexInit kexDHGexInitMsg
	if err = Unmarshal(packet, &kexDHGexInit); err != nil {
		return
	}

	y, err := rand.Int(randSource, p)
	if err != nil {
		return
	}

	Y := new(big.Int).Exp(g, y, p)
	kInt, err := diffieHellman(kexDHGexInit.X, y, p)
	if err != nil {
		return nil, err
	}

	hostKeyBytes := priv.PublicKey().Marshal()

	h := gex.hashFunc.New()
	magics.write(h)
	writeString(h, hostKeyBytes)
	binary.Write(h, binary.BigEndian, uint32(MinBits))
	binary.Write(h, binary.BigEndian, uint32(PreferredBits))
	binary.Write(h, binary.BigEndian, uint32(MaxBits))
	writeInt(h, p)
	writeInt(h, g)
	writeInt(h, kexDHGexInit.X)
	writeInt(h, Y)

	K := make([]byte, intLength(kInt))
	marshalInt(K, kInt)
	h.Write(K)

	H := h.Sum(nil)

	// H is already a hash, but the hostkey signing will apply its
	// own key-specific hash algorithm.
	sig, err := signAndMarshal(priv, randSource, H)
	if err != nil {
		return nil, err
	}

	kexDHGexReply := kexDHGexReplyMsg{
		HostKey:   hostKeyBytes,
		Y:         Y,
		Signature: sig,
	}
	packet = Marshal(&kexDHGexReply)

	err = c.writePacket(packet)

	return &kexResult{
		H:         H,
		K:         K,
		HostKey:   hostKeyBytes,
		Signature: sig,
		Hash:      gex.hashFunc,
	}, nil
}

type modulus struct {
	time      int64
	generator int64
	modulus   *big.Int
}

// Moduli from https://raw.githubusercontent.com/openssh/openssh-portable/2ed17aa34008bdfc8db674315adc425a0712be11/moduli
// Selected first modulus per size to reduce file size
var fallbackModuli = map[int][]modulus{
	2047: {{20150520235007, 5, mustBigIntFromHexString("F7360753237CF1837003CDFE89D99C8149BE6C4B4CCD9D09D834FF137878C452FB4FAB5CA51BE6619BC6FEC4184FA9A96D21FDE83505B67262EEA4870FD709F4DD3A2EC36E5746ED80D762467E794FE524992EAC42D2F0F391A63E027F24411B231D25AEFE60C9329CE8FFB61A8A123C74F6755211C8CFD59915CE0DE28579B66CB426D111F90B19A5BD83AB8C2CAB09FB1F09509B029883BD154B82418B4F3A9EE4564E5F344D5B911C10829C1E975817EB2DFF49F34D95277897A7198C9C4921037B8AA091C380663A6D5260F98FA784565DE2D977C50A1079B485F4BE63B4E3D6A63FD8DD59704116A41CB1C7C2AAA449071BFBAFB0F867FCC031E9A9C5F7")}},
	3071: {{20150521000841, 2, mustBigIntFromHexString("E0C2D7F7B6E4C69A3B6632FC77BED88CAC663CE39D91DDF017816529795F33B591F80F445BE16F8FB51D11861682154B904AE2282FA0462EB6C508FD7B7AEC551A6C630FE9CC7E17E660377558E4F841CD77AABD81E6A0988823047B3A00C2E50C33035987D6EA42C65FD776051F5D43045848D4385FB37482DC9E5133D1B75E34CC81C2B87C9530F5229FF2154604A286C2E257D3A89CF330AEDBA16288E852277C5D7C6AA947B4510625312DF982A30A4D75679F707EB325CD4DF65C7A58154C6C05E28545DE69673B3EA9CCD41529A7CCEB49A3392D23E9AB083148DD956F8CA9B8CDD76496FF95B5782EE888C40EF1201EB3A52CAE1A635BBF82CD479B38DABD6DEE7A2844F8C614215B04CEBDD41039C2DC2D1CF00AFC78C0363E548FAE1DE8A7B535CC41CED767BE05F300F50C59307061ADE1CAA4614F8FEFAECE8F8C5DB3F425B348A206B0E95703EEA8785768CDB53972422C75B58A7AEA2AD9E2546EA991466E6AFE1FA157D75D3F6616DB715D10CCD6B71C73051FE622CC7F06BB")}},
	4095: {{20150521011229, 2, mustBigIntFromHexString("C8BCE52E2AE7AE1EC20056B2D0764047C92392C9DF75C3A57EB8AF1062A809E6EA975D9910AA5C55833CC47D4DA76E92BF63FEBB289E5FE2ED729429DE9567D0A489FA27B41810066B96602B2E555B34628A37C4CE04984D15C36F1EAD09081D2CB2147D5F0B7E8BCF0774FFCF5F649E0CB797DD23D0801C153B6B8480828CF165C7ED3181F316F371C6EC0B6EF6B8CBE36E5A4E8C070854668AF07FE6C73C3EB817CD0E8C7F264546A1B0402AC0FCEBA5032EBA2323769CC401D262971F4B44FC1151EC4F6E761709FD6ABDC84D9C36046811F54DC86D293D16D235DC712BF7346CDAC005AE5C0DCD96480C9BD0CF7C4BD50026553E27F957B6640BA6A87C6642FF3D97A3E63DA468276E3A22C0C3F2A1CFFB4F190D5E23700BB468EA31FD3EB87B44B51BDABDB0667FCFB618CECFB2BC440A5F2E237E93A6DFF96AB3561AF5EE1BDA21720129FF2123F7038C70B4CADF1BC70B2EF5EBC264E1E3B2A4B3780D4A11507D03A498A556A923B0EFAF90D024341A47818F03D5ADD961086C2573DABF02C4E2F303817D323E1D8D88EFBE3F5E0D6688593C65254907745CA6176C8ED7D6B830875A0BA8FFEEB1882742A4553E4E55A93A7AD4F3224B7BFA03E29C77DB0FCCE0E37E6D3A64C5555ED9555FA1E2C34EC04DA3B6E0AAA7BF64879BC4724859FE806E7DC49A5394AD3D01492F05AE69CF10C67B18BDFF8E877F951FEB83")}},
	6143: {{20150521004745, 2, mustBigIntFromHexString("D9F2DC4F4AB3E451AB7781730AE26AE5AB1927A8F93D05C7765C4F23947CBAD218690437DDE587137100CA657CB902597743E8B05CB9B821A48E081C451227F5E42404534A28EE1D0A52FA903FBB15B79139D130420B8C7BD2477CDF0C06CF4C9943DF76A74C3B503B2229A5628E13983B0426A10FD164A720488DE3A1639D004B694ADB5216C21F481519865529CE6E3C9C8B89AC00FBF2B4C1F0B0033AC2A5072A157B5D4346950917B055227557FF1EB5F0873D75E648BEE4B6F88D4B228CB89C7602E34F85BF86DDBD09CA39993C73FF59B0310754F0D24740316F7D8D21D67EC65C8715B7130EBC8E19EB712990BBB30D650ACB0B7864B632ABBC2AEE7221393A5C74B043568043480DB41821A0CE1E6D271456C2FDC243D39868FB0D7BDA3FAD5894F7DCBBC5751B77B3DF99F6E8A5BD7A5B82F594E3E0CA2BBF7DA74312227B323652E6856B597326206CAFF2380C23CF94B8CD3EAA56BE60F8C372887CD37A62FC6F5FD467ED96E7CD9C285E75C2C353E520DFB3F39FE7B8E35FFB485B1B043F52321675EDF4848266997D059810F71D21E9DB3E3AB1BCE3713DB67155F41B7C21939B285AB63DBF1770228E4EE36314310D89200F132E8ECF2968CDA0E57DBBCE589E4DDBAD009994A817032EFA52F0659A319FBD813901BF5847EC2D7979CBA5870F3DA25BE09673952628E1EA70C82EC0BE67B402E48DF85C5983516BBEEAB811D1ECAB02928D4087B826139D073501149D47B3339CDA763840E4492661FFEF96C81C816B862EEE820019CD83C93BF9DFF8EC8C59331780D5D86B164EC12BBE59F4C9E62FD7819A941D10AFE32179B2361A17618FA84864F58C09AECB817E67BC352371BB7D7F8209E4EB9002013A585092D4721B1CB464A8480CC76173989144EF51692E373E9CCEAC9807EF190D6BBDD3BB0D16CA87DC6A54890D6F074ABD83E3CF077F2F592C0745BE15D7D6871552BB6139E5CF70D684C6D1D0C4516733E0639BBEC847313BE3D1D923B6A5FAF43A5341DD8C0779881BEB92736BA4F18BD6CDC1FC922B3809ED244748101A6C7E30DDE0C232FA3F52665F2B")}},
	7679: {{20150521041810, 5, mustBigIntFromHexString}},
	8191: {{20150521041835, 5, mustBigIntFromHexString}},
}

func mustBigIntFromHexString(s string) *big.Int {
	bi, ok := new(big.Int).SetString(s, 16)
	if !ok {
		panic("mustBigIntFromString failed")
	}
	return bi
}

func selectModuli(umin, umax, uprefered uint32, randSource io.Reader) modulus {
	// OpenSSH understates the bit length of the moduli by 1
	min := int(umin) - 1
	max := int(umax) - 1
	prefered := int(uprefered) - 1

	// Read moduli from disk
	moduli := readModuli([]string{"/etc/ssh/moduli", "/usr/local/etc/moduli"})
	if len(moduli) == 0 {
		moduli = fallbackModuli
	}

	var bitsizes []int = make([]int, len(moduli))
	i := 0
	for bitsize := range moduli {
		bitsizes[i] = bitsize
		i++
	}
	sort.Ints(bitsizes)

	good := -1
	// find nearest bitsize >= preferred
	for b := range bitsizes {
		if (b >= prefered) && (b < max) && (b < good || good == -1) {
			good = b
		}
	}

	// if that failed, find greatest bitsize >= min
	if good == -1 {
		for b := range bitsizes {
			if (b >= min) && (b < max) && (b > good) {
				good = b
			}
		}
	}

	if good == -1 {
		// their entire (min, max) range has no intersection with our range.
		// if their range is below ours, pick the smallest.  otherwise pick
		// the largest.  it'll be out of their range requirement either way,
		// but we'll be sending them the closest one we have.
		good = bitsizes[0]
		if min > good {
			good = bitsizes[len(bitsizes)-1]
		}
	}

	// now pick a random modulus of this bitsize
	rnd, err := rand.Int(randSource, big.NewInt(int64(len(moduli[good]))))
	if err != nil {
		return moduli[good][0]
	}

	return moduli[good][rnd.Int64()]
}

func readModuli(fileNames []string) map[int][]modulus {
	for _, filename := range fileNames {
		dat, err := ioutil.ReadFile(filename)
		if err != nil {
			continue
		}

		moduli := map[int][]modulus{}

		lines := strings.Split(string(dat), "\n")

		for _, line := range lines {
			// Format of moduli file:
			// Time Type Tests Tries Size Generator Modulus
			// Ignore lines beginning with #
			if strings.HasPrefix(line, "#") {
				continue
			}
			modulusParts := strings.Split(line, " ")
			if len(modulusParts) == 7 {
				time, err := strconv.Atoi(modulusParts[0])
				if err != nil {
					continue
				}
				size, err := strconv.Atoi(modulusParts[4])
				if err != nil {
					continue
				}
				generator, err := strconv.Atoi(modulusParts[5])
				if err != nil {
					continue
				}
				modul, ok := new(big.Int).SetString(modulusParts[6], 16)
				if !ok {
					continue
				}

				m := modulus{
					time:      int64(time),
					generator: int64(generator),
					modulus:   modul,
				}

				if moduli[size] == nil {
					moduli[size] = make([]modulus, 0)
				}
				moduli[size] = append(moduli[size], m)
			}
		}
		if len(moduli) == 0 {
			continue
		}
		return moduli
	}
	return map[int][]modulus{}
}
